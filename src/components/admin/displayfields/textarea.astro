---
// src/components/admin/displayfields/textarea.astro
import { truncate } from '@/lib/utils';

interface Props {
  value: string | undefined | null;
}

const { value } = Astro.props;
---

<div class="inline-block w-full max-w-full">
  {value ? (
    <div class="flex flex-col gap-2">
      <p class="text-muted-foreground text-sm leading-relaxed m-0">
        {truncate(value, 80)}
      </p>
      {value.length > 80 && (
        <button
          class="inline-flex items-center gap-1 px-2 py-1 bg-transparent border border-border rounded text-primary text-xs font-medium cursor-pointer transition-all hover:bg-accent hover:border-primary self-start"
          data-full-text={value}
          data-expand-btn
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="14"
            height="14"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <polyline points="15 3 21 3 21 9" />
            <polyline points="9 21 3 21 3 15" />
            <line x1="21" y1="3" x2="14" y2="10" />
            <line x1="3" y1="21" x2="10" y2="14" />
          </svg>
          <span>Expand</span>
        </button>
      )}
    </div>
  ) : (
    <span class="text-muted-foreground italic">No description</span>
  )}
</div>

<script>
  document.addEventListener("click", (e) => {
    const target = e.target as HTMLElement;
    const button = target.closest("[data-expand-btn]") as HTMLButtonElement;

    if (button) {
      const fullText = button.dataset.fullText;

      const modal = document.createElement("div");
      modal.className = "fixed inset-0 z-50 flex items-center justify-center p-4 opacity-0 transition-opacity duration-200";
      modal.dataset.modal = "";

      modal.innerHTML = `
        <div class="absolute inset-0 bg-background/80 backdrop-blur-sm" data-modal-overlay></div>
        <div class="relative bg-card border border-border rounded-lg shadow-lg max-w-2xl w-full max-h-[80vh] flex flex-col transform scale-95 transition-transform duration-200">
          <div class="flex items-center justify-between p-6 border-b border-border">
            <h3 class="text-lg font-semibold text-foreground m-0">Full Content</h3>
            <button
              class="flex items-center justify-center w-8 h-8 border-none bg-transparent rounded-md text-muted-foreground cursor-pointer transition-all hover:bg-accent hover:text-foreground"
              data-modal-close
              aria-label="Close"
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="18" y1="6" x2="6" y2="18"/>
                <line x1="6" y1="6" x2="18" y2="18"/>
              </svg>
            </button>
          </div>
          <div class="p-6 overflow-y-auto">
            <p class="m-0 leading-relaxed text-foreground whitespace-pre-wrap">${fullText}</p>
          </div>
        </div>
      `;

      document.body.appendChild(modal);

      const closeModal = () => {
        modal.style.opacity = "0";
        const content = modal.querySelector("[class*='scale-']");
        if (content) {
          (content as HTMLElement).style.transform = "scale(0.95)";
        }
        setTimeout(() => modal.remove(), 200);
      };

      modal.querySelector("[data-modal-close]")?.addEventListener("click", closeModal);
      modal.querySelector("[data-modal-overlay]")?.addEventListener("click", closeModal);

      requestAnimationFrame(() => {
        modal.style.opacity = "1";
        const content = modal.querySelector("[class*='scale-']");
        if (content) {
          (content as HTMLElement).style.transform = "scale(1)";
        }
      });
    }
  });
</script>
